var dataJson = {"arch":{"ispc":false,"isunix":true,"ismac":false},"build":"Dynamics","ref":false,"files":[{"name":"Dynamics.cpp","type":"source","group":"model","path":"/home/lulav/ros2_fprime_bridge/simulink/code_generation/Dynamics/Dynamics_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Dynamics.cpp\n *\n * Code generation for model \"Dynamics\".\n *\n * Model version              : 1.43\n * Simulink Coder version : 9.8 (R2022b) 13-May-2022\n * C++ source code generated on : Mon Nov 28 09:35:05 2022\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#include \"Dynamics.h\"\n#include \"Dynamics_capi.h\"\n#include \"Dynamics_private.h\"\n\n/*\n * This function updates continuous states using the ODE3 fixed-step\n * solver algorithm\n */\nvoid Dynamics::rt_ertODEUpdateContinuousStates(RTWSolverInfo *si )\n{\n  /* Solver Matrices */\n  static const real_T rt_ODE3_A[3]{\n    1.0/2.0, 3.0/4.0, 1.0\n  };\n\n  static const real_T rt_ODE3_B[3][3]{\n    { 1.0/2.0, 0.0, 0.0 },\n\n    { 0.0, 3.0/4.0, 0.0 },\n\n    { 2.0/9.0, 1.0/3.0, 4.0/9.0 }\n  };\n\n  time_T t { rtsiGetT(si) };\n\n  time_T tnew { rtsiGetSolverStopTime(si) };\n\n  time_T h { rtsiGetStepSize(si) };\n\n  real_T *x { rtsiGetContStates(si) };\n\n  ODE3_IntgData *id { static_cast<ODE3_IntgData *>(rtsiGetSolverData(si)) };\n\n  real_T *y { id->y };\n\n  real_T *f0 { id->f[0] };\n\n  real_T *f1 { id->f[1] };\n\n  real_T *f2 { id->f[2] };\n\n  real_T hB[3];\n  int_T i;\n  int_T nXc { 2 };\n\n  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);\n\n  /* Save the state values at time t in y, we'll use x as ynew. */\n  (void) std::memcpy(y, x,\n                     static_cast<uint_T>(nXc)*sizeof(real_T));\n\n  /* Assumes that rtsiSetT and ModelOutputs are up-to-date */\n  /* f0 = f(t,y) */\n  rtsiSetdX(si, f0);\n  Dynamics_derivatives();\n\n  /* f(:,2) = feval(odefile, t + hA(1), y + f*hB(:,1), args(:)(*)); */\n  hB[0] = h * rt_ODE3_B[0][0];\n  for (i = 0; i < nXc; i++) {\n    x[i] = y[i] + (f0[i]*hB[0]);\n  }\n\n  rtsiSetT(si, t + h*rt_ODE3_A[0]);\n  rtsiSetdX(si, f1);\n  this->step();\n  Dynamics_derivatives();\n\n  /* f(:,3) = feval(odefile, t + hA(2), y + f*hB(:,2), args(:)(*)); */\n  for (i = 0; i <= 1; i++) {\n    hB[i] = h * rt_ODE3_B[1][i];\n  }\n\n  for (i = 0; i < nXc; i++) {\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1]);\n  }\n\n  rtsiSetT(si, t + h*rt_ODE3_A[1]);\n  rtsiSetdX(si, f2);\n  this->step();\n  Dynamics_derivatives();\n\n  /* tnew = t + hA(3);\n     ynew = y + f*hB(:,3); */\n  for (i = 0; i <= 2; i++) {\n    hB[i] = h * rt_ODE3_B[2][i];\n  }\n\n  for (i = 0; i < nXc; i++) {\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2]);\n  }\n\n  rtsiSetT(si, tnew);\n  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);\n}\n\n/* Model step function */\nvoid Dynamics::step()\n{\n  if (rtmIsMajorTimeStep((&Dynamics_M))) {\n    /* set solver stop time */\n    if (!((&Dynamics_M)->Timing.clockTick0+1)) {\n      rtsiSetSolverStopTime(&(&Dynamics_M)->solverInfo, (((&Dynamics_M)\n        ->Timing.clockTickH0 + 1) * (&Dynamics_M)->Timing.stepSize0 *\n        4294967296.0));\n    } else {\n      rtsiSetSolverStopTime(&(&Dynamics_M)->solverInfo, (((&Dynamics_M)\n        ->Timing.clockTick0 + 1) * (&Dynamics_M)->Timing.stepSize0 +\n        (&Dynamics_M)->Timing.clockTickH0 * (&Dynamics_M)->Timing.stepSize0 *\n        4294967296.0));\n    }\n  }                                    /* end MajorTimeStep */\n\n  /* Update absolute time of base rate at minor time step */\n  if (rtmIsMinorTimeStep((&Dynamics_M))) {\n    (&Dynamics_M)->Timing.t[0] = rtsiGetT(&(&Dynamics_M)->solverInfo);\n  }\n\n  if (rtmIsMajorTimeStep((&Dynamics_M))) {\n    /* Constant: '<Root>/Constant5' */\n    Dynamics_B.Constant5 = Dynamics_P.Constant5_Value;\n  }\n\n  /* Integrator: '<Root>/Integrator' */\n  if (Dynamics_DW.Integrator_IWORK != 0) {\n    Dynamics_X.Integrator_CSTATE = Dynamics_B.Constant5;\n  }\n\n  /* Integrator: '<Root>/Integrator' */\n  Dynamics_B.v = Dynamics_X.Integrator_CSTATE;\n  if (rtmIsMajorTimeStep((&Dynamics_M))) {\n    /* Constant: '<Root>/Constant4' */\n    Dynamics_B.Constant4 = Dynamics_P.Constant4_Value;\n  }\n\n  /* Integrator: '<Root>/Integrator1' */\n  if (Dynamics_DW.Integrator1_IWORK != 0) {\n    Dynamics_X.Integrator1_CSTATE = Dynamics_B.Constant4;\n  }\n\n  /* Outport: '<Root>/state' incorporates:\n   *  BusAssignment: '<Root>/Bus Assignment'\n   *  Integrator: '<Root>/Integrator1'\n   */\n  Dynamics_Y.state.r = Dynamics_X.Integrator1_CSTATE;\n  Dynamics_Y.state.v = Dynamics_B.v;\n\n  /* Product: '<Root>/Divide' incorporates:\n   *  Constant: '<Root>/Constant'\n   *  Constant: '<Root>/Constant1'\n   *  Constant: '<Root>/Constant3'\n   *  DotProduct: '<Root>/Dot Product'\n   *  DotProduct: '<Root>/Dot Product1'\n   *  Inport: '<Root>/u'\n   *  Integrator: '<Root>/Integrator1'\n   *  Sum: '<Root>/Add'\n   */\n  Dynamics_B.Divide = ((Dynamics_U.u.u - Dynamics_P.Constant3_Value *\n                        Dynamics_B.v) - Dynamics_X.Integrator1_CSTATE *\n                       Dynamics_P.Constant1_Value) / Dynamics_P.Constant_Value;\n  if (rtmIsMajorTimeStep((&Dynamics_M))) {\n    /* Update for Integrator: '<Root>/Integrator' */\n    Dynamics_DW.Integrator_IWORK = 0;\n\n    /* Update for Integrator: '<Root>/Integrator1' */\n    Dynamics_DW.Integrator1_IWORK = 0;\n  }                                    /* end MajorTimeStep */\n\n  if (rtmIsMajorTimeStep((&Dynamics_M))) {\n    rt_ertODEUpdateContinuousStates(&(&Dynamics_M)->solverInfo);\n\n    /* Update absolute time for base rate */\n    /* The \"clockTick0\" counts the number of times the code of this task has\n     * been executed. The absolute time is the multiplication of \"clockTick0\"\n     * and \"Timing.stepSize0\". Size of \"clockTick0\" ensures timer will not\n     * overflow during the application lifespan selected.\n     * Timer of this task consists of two 32 bit unsigned integers.\n     * The two integers represent the low bits Timing.clockTick0 and the high bits\n     * Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.\n     */\n    if (!(++(&Dynamics_M)->Timing.clockTick0)) {\n      ++(&Dynamics_M)->Timing.clockTickH0;\n    }\n\n    (&Dynamics_M)->Timing.t[0] = rtsiGetSolverStopTime(&(&Dynamics_M)\n      ->solverInfo);\n\n    {\n      /* Update absolute timer for sample time: [0.01s, 0.0s] */\n      /* The \"clockTick1\" counts the number of times the code of this task has\n       * been executed. The resolution of this integer timer is 0.01, which is the step size\n       * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\n       * application lifespan selected.\n       * Timer of this task consists of two 32 bit unsigned integers.\n       * The two integers represent the low bits Timing.clockTick1 and the high bits\n       * Timing.clockTickH1. When the low bit overflows to 0, the high bits increment.\n       */\n      (&Dynamics_M)->Timing.clockTick1++;\n      if (!(&Dynamics_M)->Timing.clockTick1) {\n        (&Dynamics_M)->Timing.clockTickH1++;\n      }\n    }\n  }                                    /* end MajorTimeStep */\n}\n\n/* Derivatives for root system: '<Root>' */\nvoid Dynamics::Dynamics_derivatives()\n{\n  XDot_Dynamics_T *_rtXdot;\n  _rtXdot = ((XDot_Dynamics_T *) (&Dynamics_M)->derivs);\n\n  /* Derivatives for Integrator: '<Root>/Integrator' */\n  _rtXdot->Integrator_CSTATE = Dynamics_B.Divide;\n\n  /* Derivatives for Integrator: '<Root>/Integrator1' */\n  _rtXdot->Integrator1_CSTATE = Dynamics_B.v;\n}\n\n/* Model initialize function */\nvoid Dynamics::initialize()\n{\n  /* Registration code */\n  {\n    /* Setup solver object */\n    rtsiSetSimTimeStepPtr(&(&Dynamics_M)->solverInfo, &(&Dynamics_M)\n                          ->Timing.simTimeStep);\n    rtsiSetTPtr(&(&Dynamics_M)->solverInfo, &rtmGetTPtr((&Dynamics_M)));\n    rtsiSetStepSizePtr(&(&Dynamics_M)->solverInfo, &(&Dynamics_M)\n                       ->Timing.stepSize0);\n    rtsiSetdXPtr(&(&Dynamics_M)->solverInfo, &(&Dynamics_M)->derivs);\n    rtsiSetContStatesPtr(&(&Dynamics_M)->solverInfo, (real_T **) &(&Dynamics_M\n                         )->contStates);\n    rtsiSetNumContStatesPtr(&(&Dynamics_M)->solverInfo, &(&Dynamics_M)\n      ->Sizes.numContStates);\n    rtsiSetNumPeriodicContStatesPtr(&(&Dynamics_M)->solverInfo, &(&Dynamics_M)\n      ->Sizes.numPeriodicContStates);\n    rtsiSetPeriodicContStateIndicesPtr(&(&Dynamics_M)->solverInfo, &(&Dynamics_M)\n      ->periodicContStateIndices);\n    rtsiSetPeriodicContStateRangesPtr(&(&Dynamics_M)->solverInfo, &(&Dynamics_M\n      )->periodicContStateRanges);\n    rtsiSetErrorStatusPtr(&(&Dynamics_M)->solverInfo, (&rtmGetErrorStatus\n      ((&Dynamics_M))));\n    rtsiSetRTModelPtr(&(&Dynamics_M)->solverInfo, (&Dynamics_M));\n  }\n\n  rtsiSetSimTimeStep(&(&Dynamics_M)->solverInfo, MAJOR_TIME_STEP);\n  (&Dynamics_M)->intgData.y = (&Dynamics_M)->odeY;\n  (&Dynamics_M)->intgData.f[0] = (&Dynamics_M)->odeF[0];\n  (&Dynamics_M)->intgData.f[1] = (&Dynamics_M)->odeF[1];\n  (&Dynamics_M)->intgData.f[2] = (&Dynamics_M)->odeF[2];\n  (&Dynamics_M)->contStates = ((X_Dynamics_T *) &Dynamics_X);\n  rtsiSetSolverData(&(&Dynamics_M)->solverInfo, static_cast<void *>\n                    (&(&Dynamics_M)->intgData));\n  rtsiSetIsMinorTimeStepWithModeChange(&(&Dynamics_M)->solverInfo, false);\n  rtsiSetSolverName(&(&Dynamics_M)->solverInfo,\"ode3\");\n  rtmSetTPtr((&Dynamics_M), &(&Dynamics_M)->Timing.tArray[0]);\n  (&Dynamics_M)->Timing.stepSize0 = 0.01;\n  rtmSetFirstInitCond((&Dynamics_M), 1);\n\n  /* Initialize DataMapInfo substructure containing ModelMap for C API */\n  Dynamics_InitializeDataMapInfo((&Dynamics_M), &Dynamics_P);\n\n  /* Start for Constant: '<Root>/Constant5' */\n  Dynamics_B.Constant5 = Dynamics_P.Constant5_Value;\n\n  /* Start for Constant: '<Root>/Constant4' */\n  Dynamics_B.Constant4 = Dynamics_P.Constant4_Value;\n\n  /* InitializeConditions for Integrator: '<Root>/Integrator' incorporates:\n   *  Integrator: '<Root>/Integrator1'\n   */\n  if (rtmIsFirstInitCond((&Dynamics_M))) {\n    Dynamics_X.Integrator_CSTATE = 0.0;\n    Dynamics_X.Integrator1_CSTATE = -1.0;\n  }\n\n  Dynamics_DW.Integrator_IWORK = 1;\n\n  /* End of InitializeConditions for Integrator: '<Root>/Integrator' */\n\n  /* InitializeConditions for Integrator: '<Root>/Integrator1' */\n  Dynamics_DW.Integrator1_IWORK = 1;\n\n  /* set \"at time zero\" to false */\n  if (rtmIsFirstInitCond((&Dynamics_M))) {\n    rtmSetFirstInitCond((&Dynamics_M), 0);\n  }\n}\n\n/* Model terminate function */\nvoid Dynamics::terminate()\n{\n  /* (no terminate code required) */\n}\n\n/* Constructor */\nDynamics::Dynamics() :\n  Dynamics_U(),\n  Dynamics_Y(),\n  Dynamics_B(),\n  Dynamics_DW(),\n  Dynamics_X(),\n  Dynamics_M()\n{\n  /* Currently there is no constructor body generated.*/\n}\n\n/* Destructor */\nDynamics::~Dynamics()\n{\n  /* Currently there is no destructor body generated.*/\n}\n\n/* Real-Time Model get method */\nRT_MODEL_Dynamics_T * Dynamics::getRTM()\n{\n  return (&Dynamics_M);\n}\n"},{"name":"Dynamics.h","type":"header","group":"model","path":"/home/lulav/ros2_fprime_bridge/simulink/code_generation/Dynamics/Dynamics_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Dynamics.h\n *\n * Code generation for model \"Dynamics\".\n *\n * Model version              : 1.43\n * Simulink Coder version : 9.8 (R2022b) 13-May-2022\n * C++ source code generated on : Mon Nov 28 09:35:05 2022\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_Dynamics_h_\n#define RTW_HEADER_Dynamics_h_\n#include \"rtwtypes.h\"\n#include \"rtw_continuous.h\"\n#include \"rtw_solver.h\"\n#include \"Dynamics_types.h\"\n#include \"rtw_modelmap.h\"\n#include <cstring>\n\n/* Macros for accessing real-time model data structure */\n#ifndef rtmGetContStateDisabled\n#define rtmGetContStateDisabled(rtm)   ((rtm)->contStateDisabled)\n#endif\n\n#ifndef rtmSetContStateDisabled\n#define rtmSetContStateDisabled(rtm, val) ((rtm)->contStateDisabled = (val))\n#endif\n\n#ifndef rtmGetContStates\n#define rtmGetContStates(rtm)          ((rtm)->contStates)\n#endif\n\n#ifndef rtmSetContStates\n#define rtmSetContStates(rtm, val)     ((rtm)->contStates = (val))\n#endif\n\n#ifndef rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag\n#define rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm) ((rtm)->CTOutputIncnstWithState)\n#endif\n\n#ifndef rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag\n#define rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm, val) ((rtm)->CTOutputIncnstWithState = (val))\n#endif\n\n#ifndef rtmGetDataMapInfo\n#define rtmGetDataMapInfo(rtm)         ((rtm)->DataMapInfo)\n#endif\n\n#ifndef rtmSetDataMapInfo\n#define rtmSetDataMapInfo(rtm, val)    ((rtm)->DataMapInfo = (val))\n#endif\n\n#ifndef rtmGetDerivCacheNeedsReset\n#define rtmGetDerivCacheNeedsReset(rtm) ((rtm)->derivCacheNeedsReset)\n#endif\n\n#ifndef rtmSetDerivCacheNeedsReset\n#define rtmSetDerivCacheNeedsReset(rtm, val) ((rtm)->derivCacheNeedsReset = (val))\n#endif\n\n#ifndef rtmGetIntgData\n#define rtmGetIntgData(rtm)            ((rtm)->intgData)\n#endif\n\n#ifndef rtmSetIntgData\n#define rtmSetIntgData(rtm, val)       ((rtm)->intgData = (val))\n#endif\n\n#ifndef rtmGetOdeF\n#define rtmGetOdeF(rtm)                ((rtm)->odeF)\n#endif\n\n#ifndef rtmSetOdeF\n#define rtmSetOdeF(rtm, val)           ((rtm)->odeF = (val))\n#endif\n\n#ifndef rtmGetOdeY\n#define rtmGetOdeY(rtm)                ((rtm)->odeY)\n#endif\n\n#ifndef rtmSetOdeY\n#define rtmSetOdeY(rtm, val)           ((rtm)->odeY = (val))\n#endif\n\n#ifndef rtmGetPeriodicContStateIndices\n#define rtmGetPeriodicContStateIndices(rtm) ((rtm)->periodicContStateIndices)\n#endif\n\n#ifndef rtmSetPeriodicContStateIndices\n#define rtmSetPeriodicContStateIndices(rtm, val) ((rtm)->periodicContStateIndices = (val))\n#endif\n\n#ifndef rtmGetPeriodicContStateRanges\n#define rtmGetPeriodicContStateRanges(rtm) ((rtm)->periodicContStateRanges)\n#endif\n\n#ifndef rtmSetPeriodicContStateRanges\n#define rtmSetPeriodicContStateRanges(rtm, val) ((rtm)->periodicContStateRanges = (val))\n#endif\n\n#ifndef rtmGetZCCacheNeedsReset\n#define rtmGetZCCacheNeedsReset(rtm)   ((rtm)->zCCacheNeedsReset)\n#endif\n\n#ifndef rtmSetZCCacheNeedsReset\n#define rtmSetZCCacheNeedsReset(rtm, val) ((rtm)->zCCacheNeedsReset = (val))\n#endif\n\n#ifndef rtmGetdX\n#define rtmGetdX(rtm)                  ((rtm)->derivs)\n#endif\n\n#ifndef rtmSetdX\n#define rtmSetdX(rtm, val)             ((rtm)->derivs = (val))\n#endif\n\n#ifndef rtmGetErrorStatus\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\n#endif\n\n#ifndef rtmSetErrorStatus\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\n#endif\n\n#ifndef rtmGetStopRequested\n#define rtmGetStopRequested(rtm)       ((rtm)->Timing.stopRequestedFlag)\n#endif\n\n#ifndef rtmSetStopRequested\n#define rtmSetStopRequested(rtm, val)  ((rtm)->Timing.stopRequestedFlag = (val))\n#endif\n\n#ifndef rtmGetStopRequestedPtr\n#define rtmGetStopRequestedPtr(rtm)    (&((rtm)->Timing.stopRequestedFlag))\n#endif\n\n#ifndef rtmGetT\n#define rtmGetT(rtm)                   (rtmGetTPtr((rtm))[0])\n#endif\n\n#ifndef rtmGetTPtr\n#define rtmGetTPtr(rtm)                ((rtm)->Timing.t)\n#endif\n\n/* Block signals (default storage) */\nstruct B_Dynamics_T {\n  real_T Constant5;                    /* '<Root>/Constant5' */\n  real_T v;                            /* '<Root>/Integrator' */\n  real_T Constant4;                    /* '<Root>/Constant4' */\n  real_T Divide;                       /* '<Root>/Divide' */\n};\n\n/* Block states (default storage) for system '<Root>' */\nstruct DW_Dynamics_T {\n  int_T Integrator_IWORK;              /* '<Root>/Integrator' */\n  int_T Integrator1_IWORK;             /* '<Root>/Integrator1' */\n};\n\n/* Continuous states (default storage) */\nstruct X_Dynamics_T {\n  real_T Integrator_CSTATE;            /* '<Root>/Integrator' */\n  real_T Integrator1_CSTATE;           /* '<Root>/Integrator1' */\n};\n\n/* State derivatives (default storage) */\nstruct XDot_Dynamics_T {\n  real_T Integrator_CSTATE;            /* '<Root>/Integrator' */\n  real_T Integrator1_CSTATE;           /* '<Root>/Integrator1' */\n};\n\n/* State disabled  */\nstruct XDis_Dynamics_T {\n  boolean_T Integrator_CSTATE;         /* '<Root>/Integrator' */\n  boolean_T Integrator1_CSTATE;        /* '<Root>/Integrator1' */\n};\n\n#ifndef ODE3_INTG\n#define ODE3_INTG\n\n/* ODE3 Integration Data */\nstruct ODE3_IntgData {\n  real_T *y;                           /* output */\n  real_T *f[3];                        /* derivatives */\n};\n\n#endif\n\n/* External inputs (root inport signals with default storage) */\nstruct ExtU_Dynamics_T {\n  B_Controller u;                      /* '<Root>/u' */\n};\n\n/* External outputs (root outports fed by signals with default storage) */\nstruct ExtY_Dynamics_T {\n  B_Dynamics state;                    /* '<Root>/state' */\n};\n\n/* Parameters (default storage) */\nstruct P_Dynamics_T_ {\n  B_Dynamics Constant2_Value;          /* Computed Parameter: Constant2_Value\n                                        * Referenced by: '<Root>/Constant2'\n                                        */\n  real_T Constant5_Value;              /* Expression: params.v0.Value\n                                        * Referenced by: '<Root>/Constant5'\n                                        */\n  real_T Constant4_Value;              /* Expression: params.r0.Value\n                                        * Referenced by: '<Root>/Constant4'\n                                        */\n  real_T Constant3_Value;              /* Expression: params.c.Value\n                                        * Referenced by: '<Root>/Constant3'\n                                        */\n  real_T Constant1_Value;              /* Expression: params.k.Value\n                                        * Referenced by: '<Root>/Constant1'\n                                        */\n  real_T Constant_Value;               /* Expression: params.m.Value\n                                        * Referenced by: '<Root>/Constant'\n                                        */\n};\n\n/* Real-time Model Data Structure */\nstruct tag_RTM_Dynamics_T {\n  const char_T *errorStatus;\n  RTWSolverInfo solverInfo;\n  X_Dynamics_T *contStates;\n  int_T *periodicContStateIndices;\n  real_T *periodicContStateRanges;\n  real_T *derivs;\n  XDis_Dynamics_T *contStateDisabled;\n  boolean_T zCCacheNeedsReset;\n  boolean_T derivCacheNeedsReset;\n  boolean_T CTOutputIncnstWithState;\n  real_T odeY[2];\n  real_T odeF[3][2];\n  ODE3_IntgData intgData;\n\n  /*\n   * DataMapInfo:\n   * The following substructure contains information regarding\n   * structures generated in the model's C API.\n   */\n  struct {\n    rtwCAPI_ModelMappingInfo mmi;\n    void* dataAddress[6];\n    int32_T* vardimsAddress[6];\n    RTWLoggingFcnPtr loggingPtrs[6];\n  } DataMapInfo;\n\n  /*\n   * Sizes:\n   * The following substructure contains sizes information\n   * for many of the model attributes such as inputs, outputs,\n   * dwork, sample times, etc.\n   */\n  struct {\n    int_T numContStates;\n    int_T numPeriodicContStates;\n    int_T numSampTimes;\n  } Sizes;\n\n  /*\n   * Timing:\n   * The following substructure contains information regarding\n   * the timing information for the model.\n   */\n  struct {\n    uint32_T clockTick0;\n    uint32_T clockTickH0;\n    time_T stepSize0;\n    uint32_T clockTick1;\n    uint32_T clockTickH1;\n    boolean_T firstInitCondFlag;\n    SimTimeStep simTimeStep;\n    boolean_T stopRequestedFlag;\n    time_T *t;\n    time_T tArray[2];\n  } Timing;\n};\n\n/* Function to get C API Model Mapping Static Info */\nextern const rtwCAPI_ModelMappingStaticInfo*\n  Dynamics_GetCAPIStaticMap(void);\n\n/* Class declaration for model Dynamics */\nclass Dynamics final\n{\n  /* public data and function members */\n public:\n  /* Copy Constructor */\n  Dynamics(Dynamics const&) = delete;\n\n  /* Assignment Operator */\n  Dynamics& operator= (Dynamics const&) & = delete;\n\n  /* Move Constructor */\n  Dynamics(Dynamics &&) = delete;\n\n  /* Move Assignment Operator */\n  Dynamics& operator= (Dynamics &&) = delete;\n\n  /* Real-Time Model get method */\n  RT_MODEL_Dynamics_T * getRTM();\n\n  /* Root inports set method */\n  void setExternalInputs(const ExtU_Dynamics_T *pExtU_Dynamics_T)\n  {\n    Dynamics_U = *pExtU_Dynamics_T;\n  }\n\n  /* Root outports get method */\n  const ExtY_Dynamics_T &getExternalOutputs() const\n  {\n    return Dynamics_Y;\n  }\n\n  /* model start function */\n  void start();\n\n  /* Initial conditions function */\n  void initialize();\n\n  /* model step function */\n  void step();\n\n  /* model terminate function */\n  static void terminate();\n\n  /* Constructor */\n  Dynamics();\n\n  /* Destructor */\n  ~Dynamics();\n\n  /* private data and function members */\n private:\n  /* External inputs */\n  ExtU_Dynamics_T Dynamics_U;\n\n  /* External outputs */\n  ExtY_Dynamics_T Dynamics_Y;\n\n  /* Block signals */\n  B_Dynamics_T Dynamics_B;\n\n  /* Block states */\n  DW_Dynamics_T Dynamics_DW;\n\n  /* Tunable parameters */\n  static P_Dynamics_T Dynamics_P;\n\n  /* Block continuous states */\n  X_Dynamics_T Dynamics_X;\n\n  /* Continuous states update member function*/\n  void rt_ertODEUpdateContinuousStates(RTWSolverInfo *si );\n\n  /* Derivatives member function */\n  void Dynamics_derivatives();\n\n  /* Real-Time Model */\n  RT_MODEL_Dynamics_T Dynamics_M;\n};\n\n/*-\n * The generated code includes comments that allow you to trace directly\n * back to the appropriate location in the model.  The basic format\n * is <system>/block_name, where system is the system number (uniquely\n * assigned by Simulink) and block_name is the name of the block.\n *\n * Use the MATLAB hilite_system command to trace the generated code back\n * to the model.  For example,\n *\n * hilite_system('<S3>')    - opens system 3\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\n *\n * Here is the system hierarchy for this model\n *\n * '<Root>' : 'Dynamics'\n */\n#endif                                 /* RTW_HEADER_Dynamics_h_ */\n"},{"name":"Dynamics_private.h","type":"header","group":"model","path":"/home/lulav/ros2_fprime_bridge/simulink/code_generation/Dynamics/Dynamics_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Dynamics_private.h\n *\n * Code generation for model \"Dynamics\".\n *\n * Model version              : 1.43\n * Simulink Coder version : 9.8 (R2022b) 13-May-2022\n * C++ source code generated on : Mon Nov 28 09:35:05 2022\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_Dynamics_private_h_\n#define RTW_HEADER_Dynamics_private_h_\n#include \"rtwtypes.h\"\n#include \"builtin_typeid_types.h\"\n#include \"multiword_types.h\"\n#include \"Dynamics_types.h\"\n\n/* Private macros used by the generated code to access rtModel */\n#ifndef rtmSetFirstInitCond\n#define rtmSetFirstInitCond(rtm, val)  ((rtm)->Timing.firstInitCondFlag = (val))\n#endif\n\n#ifndef rtmIsFirstInitCond\n#define rtmIsFirstInitCond(rtm)        ((rtm)->Timing.firstInitCondFlag)\n#endif\n\n#ifndef rtmIsMajorTimeStep\n#define rtmIsMajorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MAJOR_TIME_STEP)\n#endif\n\n#ifndef rtmIsMinorTimeStep\n#define rtmIsMinorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MINOR_TIME_STEP)\n#endif\n\n#ifndef rtmSetTPtr\n#define rtmSetTPtr(rtm, val)           ((rtm)->Timing.t = (val))\n#endif\n\n/* private model entry point functions */\nextern void Dynamics_derivatives();\n\n#endif                                 /* RTW_HEADER_Dynamics_private_h_ */\n"},{"name":"Dynamics_types.h","type":"header","group":"model","path":"/home/lulav/ros2_fprime_bridge/simulink/code_generation/Dynamics/Dynamics_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Dynamics_types.h\n *\n * Code generation for model \"Dynamics\".\n *\n * Model version              : 1.43\n * Simulink Coder version : 9.8 (R2022b) 13-May-2022\n * C++ source code generated on : Mon Nov 28 09:35:05 2022\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_Dynamics_types_h_\n#define RTW_HEADER_Dynamics_types_h_\n#include \"rtwtypes.h\"\n#ifndef DEFINED_TYPEDEF_FOR_B_Controller_\n#define DEFINED_TYPEDEF_FOR_B_Controller_\n\nstruct B_Controller\n{\n  real_T u;\n};\n\n#endif\n\n#ifndef DEFINED_TYPEDEF_FOR_B_Dynamics_\n#define DEFINED_TYPEDEF_FOR_B_Dynamics_\n\nstruct B_Dynamics\n{\n  real_T r;\n  real_T v;\n};\n\n#endif\n\n/* Parameters (default storage) */\ntypedef struct P_Dynamics_T_ P_Dynamics_T;\n\n/* Forward declaration for rtModel */\ntypedef struct tag_RTM_Dynamics_T RT_MODEL_Dynamics_T;\n\n#endif                                 /* RTW_HEADER_Dynamics_types_h_ */\n"},{"name":"Dynamics_data.cpp","type":"source","group":"data","path":"/home/lulav/ros2_fprime_bridge/simulink/code_generation/Dynamics/Dynamics_grt_rtw","tag":"","groupDisplay":"Data files","code":"/*\n * Dynamics_data.cpp\n *\n * Code generation for model \"Dynamics\".\n *\n * Model version              : 1.43\n * Simulink Coder version : 9.8 (R2022b) 13-May-2022\n * C++ source code generated on : Mon Nov 28 09:35:05 2022\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#include \"Dynamics.h\"\n\n/* Block parameters (default storage) */\nP_Dynamics_T Dynamics::Dynamics_P{\n  /* Computed Parameter: Constant2_Value\n   * Referenced by: '<Root>/Constant2'\n   */\n  {\n    0.0,                               /* r */\n    0.0                                /* v */\n  },\n\n  /* Expression: params.v0.Value\n   * Referenced by: '<Root>/Constant5'\n   */\n  0.0,\n\n  /* Expression: params.r0.Value\n   * Referenced by: '<Root>/Constant4'\n   */\n  -1.0,\n\n  /* Expression: params.c.Value\n   * Referenced by: '<Root>/Constant3'\n   */\n  0.3,\n\n  /* Expression: params.k.Value\n   * Referenced by: '<Root>/Constant1'\n   */\n  2.5,\n\n  /* Expression: params.m.Value\n   * Referenced by: '<Root>/Constant'\n   */\n  1.0\n};\n"},{"name":"builtin_typeid_types.h","type":"header","group":"utility","path":"/home/lulav/ros2_fprime_bridge/simulink/code_generation/Dynamics/Dynamics_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * builtin_typeid_types.h\n *\n * Code generation for model \"Dynamics\".\n *\n * Model version              : 1.43\n * Simulink Coder version : 9.8 (R2022b) 13-May-2022\n * C++ source code generated on : Mon Nov 28 09:35:05 2022\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef BUILTIN_TYPEID_TYPES_H\n#define BUILTIN_TYPEID_TYPES_H\n#ifndef BUILTIN_TYPEID_TYPES\n#define BUILTIN_TYPEID_TYPES\n\n/* Enumeration of built-in data types */\ntypedef enum {\n  SS_DOUBLE = 0,\n  SS_SINGLE = 1,\n  SS_INT8 = 2,\n  SS_UINT8 = 3,\n  SS_INT16 = 4,\n  SS_UINT16 = 5,\n  SS_INT32 = 6,\n  SS_UINT32 = 7,\n  SS_BOOLEAN = 8\n} BuiltInDTypeId;\n\n#define SS_NUM_BUILT_IN_DTYPE          ((int)SS_BOOLEAN+1)\n\n/* Enumeration for MAT-file logging code */\ntypedef int DTypeId;\n\n/* Enumeration of pre-defined data types */\ntypedef enum {\n  SS_FCN_CALL = 9,\n  SS_INTEGER = 10,\n  SS_POINTER = 11,\n  SS_INTERNAL_DTYPE2 = 12,\n  SS_TIMER_UINT32_PAIR = 13,\n  SS_CONNECTION_TYPE = 14\n} PreDefinedDTypeId;\n\n#endif                                 /* BUILTIN_TYPEID_TYPES */\n#endif                                 /* BUILTIN_TYPEID_TYPES_H */\n"},{"name":"multiword_types.h","type":"header","group":"utility","path":"/home/lulav/ros2_fprime_bridge/simulink/code_generation/Dynamics/Dynamics_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * multiword_types.h\n *\n * Code generation for model \"Dynamics\".\n *\n * Model version              : 1.43\n * Simulink Coder version : 9.8 (R2022b) 13-May-2022\n * C++ source code generated on : Mon Nov 28 09:35:05 2022\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef MULTIWORD_TYPES_H\n#define MULTIWORD_TYPES_H\n#include \"rtwtypes.h\"\n\n/*\n * MultiWord supporting definitions\n */\ntypedef long int long_T;\n\n/*\n * MultiWord types\n */\ntypedef struct {\n  uint32_T chunks[2];\n} int64m_T;\n\ntypedef struct {\n  int64m_T re;\n  int64m_T im;\n} cint64m_T;\n\ntypedef struct {\n  uint32_T chunks[2];\n} uint64m_T;\n\ntypedef struct {\n  uint64m_T re;\n  uint64m_T im;\n} cuint64m_T;\n\ntypedef struct {\n  uint32_T chunks[3];\n} int96m_T;\n\ntypedef struct {\n  int96m_T re;\n  int96m_T im;\n} cint96m_T;\n\ntypedef struct {\n  uint32_T chunks[3];\n} uint96m_T;\n\ntypedef struct {\n  uint96m_T re;\n  uint96m_T im;\n} cuint96m_T;\n\ntypedef struct {\n  uint32_T chunks[4];\n} int128m_T;\n\ntypedef struct {\n  int128m_T re;\n  int128m_T im;\n} cint128m_T;\n\ntypedef struct {\n  uint32_T chunks[4];\n} uint128m_T;\n\ntypedef struct {\n  uint128m_T re;\n  uint128m_T im;\n} cuint128m_T;\n\ntypedef struct {\n  uint32_T chunks[5];\n} int160m_T;\n\ntypedef struct {\n  int160m_T re;\n  int160m_T im;\n} cint160m_T;\n\ntypedef struct {\n  uint32_T chunks[5];\n} uint160m_T;\n\ntypedef struct {\n  uint160m_T re;\n  uint160m_T im;\n} cuint160m_T;\n\ntypedef struct {\n  uint32_T chunks[6];\n} int192m_T;\n\ntypedef struct {\n  int192m_T re;\n  int192m_T im;\n} cint192m_T;\n\ntypedef struct {\n  uint32_T chunks[6];\n} uint192m_T;\n\ntypedef struct {\n  uint192m_T re;\n  uint192m_T im;\n} cuint192m_T;\n\ntypedef struct {\n  uint32_T chunks[7];\n} int224m_T;\n\ntypedef struct {\n  int224m_T re;\n  int224m_T im;\n} cint224m_T;\n\ntypedef struct {\n  uint32_T chunks[7];\n} uint224m_T;\n\ntypedef struct {\n  uint224m_T re;\n  uint224m_T im;\n} cuint224m_T;\n\ntypedef struct {\n  uint32_T chunks[8];\n} int256m_T;\n\ntypedef struct {\n  int256m_T re;\n  int256m_T im;\n} cint256m_T;\n\ntypedef struct {\n  uint32_T chunks[8];\n} uint256m_T;\n\ntypedef struct {\n  uint256m_T re;\n  uint256m_T im;\n} cuint256m_T;\n\ntypedef struct {\n  uint32_T chunks[9];\n} int288m_T;\n\ntypedef struct {\n  int288m_T re;\n  int288m_T im;\n} cint288m_T;\n\ntypedef struct {\n  uint32_T chunks[9];\n} uint288m_T;\n\ntypedef struct {\n  uint288m_T re;\n  uint288m_T im;\n} cuint288m_T;\n\ntypedef struct {\n  uint32_T chunks[10];\n} int320m_T;\n\ntypedef struct {\n  int320m_T re;\n  int320m_T im;\n} cint320m_T;\n\ntypedef struct {\n  uint32_T chunks[10];\n} uint320m_T;\n\ntypedef struct {\n  uint320m_T re;\n  uint320m_T im;\n} cuint320m_T;\n\ntypedef struct {\n  uint32_T chunks[11];\n} int352m_T;\n\ntypedef struct {\n  int352m_T re;\n  int352m_T im;\n} cint352m_T;\n\ntypedef struct {\n  uint32_T chunks[11];\n} uint352m_T;\n\ntypedef struct {\n  uint352m_T re;\n  uint352m_T im;\n} cuint352m_T;\n\ntypedef struct {\n  uint32_T chunks[12];\n} int384m_T;\n\ntypedef struct {\n  int384m_T re;\n  int384m_T im;\n} cint384m_T;\n\ntypedef struct {\n  uint32_T chunks[12];\n} uint384m_T;\n\ntypedef struct {\n  uint384m_T re;\n  uint384m_T im;\n} cuint384m_T;\n\ntypedef struct {\n  uint32_T chunks[13];\n} int416m_T;\n\ntypedef struct {\n  int416m_T re;\n  int416m_T im;\n} cint416m_T;\n\ntypedef struct {\n  uint32_T chunks[13];\n} uint416m_T;\n\ntypedef struct {\n  uint416m_T re;\n  uint416m_T im;\n} cuint416m_T;\n\ntypedef struct {\n  uint32_T chunks[14];\n} int448m_T;\n\ntypedef struct {\n  int448m_T re;\n  int448m_T im;\n} cint448m_T;\n\ntypedef struct {\n  uint32_T chunks[14];\n} uint448m_T;\n\ntypedef struct {\n  uint448m_T re;\n  uint448m_T im;\n} cuint448m_T;\n\ntypedef struct {\n  uint32_T chunks[15];\n} int480m_T;\n\ntypedef struct {\n  int480m_T re;\n  int480m_T im;\n} cint480m_T;\n\ntypedef struct {\n  uint32_T chunks[15];\n} uint480m_T;\n\ntypedef struct {\n  uint480m_T re;\n  uint480m_T im;\n} cuint480m_T;\n\ntypedef struct {\n  uint32_T chunks[16];\n} int512m_T;\n\ntypedef struct {\n  int512m_T re;\n  int512m_T im;\n} cint512m_T;\n\ntypedef struct {\n  uint32_T chunks[16];\n} uint512m_T;\n\ntypedef struct {\n  uint512m_T re;\n  uint512m_T im;\n} cuint512m_T;\n\ntypedef struct {\n  uint32_T chunks[17];\n} int544m_T;\n\ntypedef struct {\n  int544m_T re;\n  int544m_T im;\n} cint544m_T;\n\ntypedef struct {\n  uint32_T chunks[17];\n} uint544m_T;\n\ntypedef struct {\n  uint544m_T re;\n  uint544m_T im;\n} cuint544m_T;\n\ntypedef struct {\n  uint32_T chunks[18];\n} int576m_T;\n\ntypedef struct {\n  int576m_T re;\n  int576m_T im;\n} cint576m_T;\n\ntypedef struct {\n  uint32_T chunks[18];\n} uint576m_T;\n\ntypedef struct {\n  uint576m_T re;\n  uint576m_T im;\n} cuint576m_T;\n\ntypedef struct {\n  uint32_T chunks[19];\n} int608m_T;\n\ntypedef struct {\n  int608m_T re;\n  int608m_T im;\n} cint608m_T;\n\ntypedef struct {\n  uint32_T chunks[19];\n} uint608m_T;\n\ntypedef struct {\n  uint608m_T re;\n  uint608m_T im;\n} cuint608m_T;\n\ntypedef struct {\n  uint32_T chunks[20];\n} int640m_T;\n\ntypedef struct {\n  int640m_T re;\n  int640m_T im;\n} cint640m_T;\n\ntypedef struct {\n  uint32_T chunks[20];\n} uint640m_T;\n\ntypedef struct {\n  uint640m_T re;\n  uint640m_T im;\n} cuint640m_T;\n\ntypedef struct {\n  uint32_T chunks[21];\n} int672m_T;\n\ntypedef struct {\n  int672m_T re;\n  int672m_T im;\n} cint672m_T;\n\ntypedef struct {\n  uint32_T chunks[21];\n} uint672m_T;\n\ntypedef struct {\n  uint672m_T re;\n  uint672m_T im;\n} cuint672m_T;\n\ntypedef struct {\n  uint32_T chunks[22];\n} int704m_T;\n\ntypedef struct {\n  int704m_T re;\n  int704m_T im;\n} cint704m_T;\n\ntypedef struct {\n  uint32_T chunks[22];\n} uint704m_T;\n\ntypedef struct {\n  uint704m_T re;\n  uint704m_T im;\n} cuint704m_T;\n\ntypedef struct {\n  uint32_T chunks[23];\n} int736m_T;\n\ntypedef struct {\n  int736m_T re;\n  int736m_T im;\n} cint736m_T;\n\ntypedef struct {\n  uint32_T chunks[23];\n} uint736m_T;\n\ntypedef struct {\n  uint736m_T re;\n  uint736m_T im;\n} cuint736m_T;\n\ntypedef struct {\n  uint32_T chunks[24];\n} int768m_T;\n\ntypedef struct {\n  int768m_T re;\n  int768m_T im;\n} cint768m_T;\n\ntypedef struct {\n  uint32_T chunks[24];\n} uint768m_T;\n\ntypedef struct {\n  uint768m_T re;\n  uint768m_T im;\n} cuint768m_T;\n\ntypedef struct {\n  uint32_T chunks[25];\n} int800m_T;\n\ntypedef struct {\n  int800m_T re;\n  int800m_T im;\n} cint800m_T;\n\ntypedef struct {\n  uint32_T chunks[25];\n} uint800m_T;\n\ntypedef struct {\n  uint800m_T re;\n  uint800m_T im;\n} cuint800m_T;\n\ntypedef struct {\n  uint32_T chunks[26];\n} int832m_T;\n\ntypedef struct {\n  int832m_T re;\n  int832m_T im;\n} cint832m_T;\n\ntypedef struct {\n  uint32_T chunks[26];\n} uint832m_T;\n\ntypedef struct {\n  uint832m_T re;\n  uint832m_T im;\n} cuint832m_T;\n\ntypedef struct {\n  uint32_T chunks[27];\n} int864m_T;\n\ntypedef struct {\n  int864m_T re;\n  int864m_T im;\n} cint864m_T;\n\ntypedef struct {\n  uint32_T chunks[27];\n} uint864m_T;\n\ntypedef struct {\n  uint864m_T re;\n  uint864m_T im;\n} cuint864m_T;\n\ntypedef struct {\n  uint32_T chunks[28];\n} int896m_T;\n\ntypedef struct {\n  int896m_T re;\n  int896m_T im;\n} cint896m_T;\n\ntypedef struct {\n  uint32_T chunks[28];\n} uint896m_T;\n\ntypedef struct {\n  uint896m_T re;\n  uint896m_T im;\n} cuint896m_T;\n\ntypedef struct {\n  uint32_T chunks[29];\n} int928m_T;\n\ntypedef struct {\n  int928m_T re;\n  int928m_T im;\n} cint928m_T;\n\ntypedef struct {\n  uint32_T chunks[29];\n} uint928m_T;\n\ntypedef struct {\n  uint928m_T re;\n  uint928m_T im;\n} cuint928m_T;\n\ntypedef struct {\n  uint32_T chunks[30];\n} int960m_T;\n\ntypedef struct {\n  int960m_T re;\n  int960m_T im;\n} cint960m_T;\n\ntypedef struct {\n  uint32_T chunks[30];\n} uint960m_T;\n\ntypedef struct {\n  uint960m_T re;\n  uint960m_T im;\n} cuint960m_T;\n\ntypedef struct {\n  uint32_T chunks[31];\n} int992m_T;\n\ntypedef struct {\n  int992m_T re;\n  int992m_T im;\n} cint992m_T;\n\ntypedef struct {\n  uint32_T chunks[31];\n} uint992m_T;\n\ntypedef struct {\n  uint992m_T re;\n  uint992m_T im;\n} cuint992m_T;\n\ntypedef struct {\n  uint32_T chunks[32];\n} int1024m_T;\n\ntypedef struct {\n  int1024m_T re;\n  int1024m_T im;\n} cint1024m_T;\n\ntypedef struct {\n  uint32_T chunks[32];\n} uint1024m_T;\n\ntypedef struct {\n  uint1024m_T re;\n  uint1024m_T im;\n} cuint1024m_T;\n\ntypedef struct {\n  uint32_T chunks[33];\n} int1056m_T;\n\ntypedef struct {\n  int1056m_T re;\n  int1056m_T im;\n} cint1056m_T;\n\ntypedef struct {\n  uint32_T chunks[33];\n} uint1056m_T;\n\ntypedef struct {\n  uint1056m_T re;\n  uint1056m_T im;\n} cuint1056m_T;\n\ntypedef struct {\n  uint32_T chunks[34];\n} int1088m_T;\n\ntypedef struct {\n  int1088m_T re;\n  int1088m_T im;\n} cint1088m_T;\n\ntypedef struct {\n  uint32_T chunks[34];\n} uint1088m_T;\n\ntypedef struct {\n  uint1088m_T re;\n  uint1088m_T im;\n} cuint1088m_T;\n\ntypedef struct {\n  uint32_T chunks[35];\n} int1120m_T;\n\ntypedef struct {\n  int1120m_T re;\n  int1120m_T im;\n} cint1120m_T;\n\ntypedef struct {\n  uint32_T chunks[35];\n} uint1120m_T;\n\ntypedef struct {\n  uint1120m_T re;\n  uint1120m_T im;\n} cuint1120m_T;\n\ntypedef struct {\n  uint32_T chunks[36];\n} int1152m_T;\n\ntypedef struct {\n  int1152m_T re;\n  int1152m_T im;\n} cint1152m_T;\n\ntypedef struct {\n  uint32_T chunks[36];\n} uint1152m_T;\n\ntypedef struct {\n  uint1152m_T re;\n  uint1152m_T im;\n} cuint1152m_T;\n\ntypedef struct {\n  uint32_T chunks[37];\n} int1184m_T;\n\ntypedef struct {\n  int1184m_T re;\n  int1184m_T im;\n} cint1184m_T;\n\ntypedef struct {\n  uint32_T chunks[37];\n} uint1184m_T;\n\ntypedef struct {\n  uint1184m_T re;\n  uint1184m_T im;\n} cuint1184m_T;\n\ntypedef struct {\n  uint32_T chunks[38];\n} int1216m_T;\n\ntypedef struct {\n  int1216m_T re;\n  int1216m_T im;\n} cint1216m_T;\n\ntypedef struct {\n  uint32_T chunks[38];\n} uint1216m_T;\n\ntypedef struct {\n  uint1216m_T re;\n  uint1216m_T im;\n} cuint1216m_T;\n\ntypedef struct {\n  uint32_T chunks[39];\n} int1248m_T;\n\ntypedef struct {\n  int1248m_T re;\n  int1248m_T im;\n} cint1248m_T;\n\ntypedef struct {\n  uint32_T chunks[39];\n} uint1248m_T;\n\ntypedef struct {\n  uint1248m_T re;\n  uint1248m_T im;\n} cuint1248m_T;\n\ntypedef struct {\n  uint32_T chunks[40];\n} int1280m_T;\n\ntypedef struct {\n  int1280m_T re;\n  int1280m_T im;\n} cint1280m_T;\n\ntypedef struct {\n  uint32_T chunks[40];\n} uint1280m_T;\n\ntypedef struct {\n  uint1280m_T re;\n  uint1280m_T im;\n} cuint1280m_T;\n\ntypedef struct {\n  uint32_T chunks[41];\n} int1312m_T;\n\ntypedef struct {\n  int1312m_T re;\n  int1312m_T im;\n} cint1312m_T;\n\ntypedef struct {\n  uint32_T chunks[41];\n} uint1312m_T;\n\ntypedef struct {\n  uint1312m_T re;\n  uint1312m_T im;\n} cuint1312m_T;\n\ntypedef struct {\n  uint32_T chunks[42];\n} int1344m_T;\n\ntypedef struct {\n  int1344m_T re;\n  int1344m_T im;\n} cint1344m_T;\n\ntypedef struct {\n  uint32_T chunks[42];\n} uint1344m_T;\n\ntypedef struct {\n  uint1344m_T re;\n  uint1344m_T im;\n} cuint1344m_T;\n\ntypedef struct {\n  uint32_T chunks[43];\n} int1376m_T;\n\ntypedef struct {\n  int1376m_T re;\n  int1376m_T im;\n} cint1376m_T;\n\ntypedef struct {\n  uint32_T chunks[43];\n} uint1376m_T;\n\ntypedef struct {\n  uint1376m_T re;\n  uint1376m_T im;\n} cuint1376m_T;\n\ntypedef struct {\n  uint32_T chunks[44];\n} int1408m_T;\n\ntypedef struct {\n  int1408m_T re;\n  int1408m_T im;\n} cint1408m_T;\n\ntypedef struct {\n  uint32_T chunks[44];\n} uint1408m_T;\n\ntypedef struct {\n  uint1408m_T re;\n  uint1408m_T im;\n} cuint1408m_T;\n\ntypedef struct {\n  uint32_T chunks[45];\n} int1440m_T;\n\ntypedef struct {\n  int1440m_T re;\n  int1440m_T im;\n} cint1440m_T;\n\ntypedef struct {\n  uint32_T chunks[45];\n} uint1440m_T;\n\ntypedef struct {\n  uint1440m_T re;\n  uint1440m_T im;\n} cuint1440m_T;\n\ntypedef struct {\n  uint32_T chunks[46];\n} int1472m_T;\n\ntypedef struct {\n  int1472m_T re;\n  int1472m_T im;\n} cint1472m_T;\n\ntypedef struct {\n  uint32_T chunks[46];\n} uint1472m_T;\n\ntypedef struct {\n  uint1472m_T re;\n  uint1472m_T im;\n} cuint1472m_T;\n\ntypedef struct {\n  uint32_T chunks[47];\n} int1504m_T;\n\ntypedef struct {\n  int1504m_T re;\n  int1504m_T im;\n} cint1504m_T;\n\ntypedef struct {\n  uint32_T chunks[47];\n} uint1504m_T;\n\ntypedef struct {\n  uint1504m_T re;\n  uint1504m_T im;\n} cuint1504m_T;\n\ntypedef struct {\n  uint32_T chunks[48];\n} int1536m_T;\n\ntypedef struct {\n  int1536m_T re;\n  int1536m_T im;\n} cint1536m_T;\n\ntypedef struct {\n  uint32_T chunks[48];\n} uint1536m_T;\n\ntypedef struct {\n  uint1536m_T re;\n  uint1536m_T im;\n} cuint1536m_T;\n\ntypedef struct {\n  uint32_T chunks[49];\n} int1568m_T;\n\ntypedef struct {\n  int1568m_T re;\n  int1568m_T im;\n} cint1568m_T;\n\ntypedef struct {\n  uint32_T chunks[49];\n} uint1568m_T;\n\ntypedef struct {\n  uint1568m_T re;\n  uint1568m_T im;\n} cuint1568m_T;\n\ntypedef struct {\n  uint32_T chunks[50];\n} int1600m_T;\n\ntypedef struct {\n  int1600m_T re;\n  int1600m_T im;\n} cint1600m_T;\n\ntypedef struct {\n  uint32_T chunks[50];\n} uint1600m_T;\n\ntypedef struct {\n  uint1600m_T re;\n  uint1600m_T im;\n} cuint1600m_T;\n\ntypedef struct {\n  uint32_T chunks[51];\n} int1632m_T;\n\ntypedef struct {\n  int1632m_T re;\n  int1632m_T im;\n} cint1632m_T;\n\ntypedef struct {\n  uint32_T chunks[51];\n} uint1632m_T;\n\ntypedef struct {\n  uint1632m_T re;\n  uint1632m_T im;\n} cuint1632m_T;\n\ntypedef struct {\n  uint32_T chunks[52];\n} int1664m_T;\n\ntypedef struct {\n  int1664m_T re;\n  int1664m_T im;\n} cint1664m_T;\n\ntypedef struct {\n  uint32_T chunks[52];\n} uint1664m_T;\n\ntypedef struct {\n  uint1664m_T re;\n  uint1664m_T im;\n} cuint1664m_T;\n\ntypedef struct {\n  uint32_T chunks[53];\n} int1696m_T;\n\ntypedef struct {\n  int1696m_T re;\n  int1696m_T im;\n} cint1696m_T;\n\ntypedef struct {\n  uint32_T chunks[53];\n} uint1696m_T;\n\ntypedef struct {\n  uint1696m_T re;\n  uint1696m_T im;\n} cuint1696m_T;\n\ntypedef struct {\n  uint32_T chunks[54];\n} int1728m_T;\n\ntypedef struct {\n  int1728m_T re;\n  int1728m_T im;\n} cint1728m_T;\n\ntypedef struct {\n  uint32_T chunks[54];\n} uint1728m_T;\n\ntypedef struct {\n  uint1728m_T re;\n  uint1728m_T im;\n} cuint1728m_T;\n\ntypedef struct {\n  uint32_T chunks[55];\n} int1760m_T;\n\ntypedef struct {\n  int1760m_T re;\n  int1760m_T im;\n} cint1760m_T;\n\ntypedef struct {\n  uint32_T chunks[55];\n} uint1760m_T;\n\ntypedef struct {\n  uint1760m_T re;\n  uint1760m_T im;\n} cuint1760m_T;\n\ntypedef struct {\n  uint32_T chunks[56];\n} int1792m_T;\n\ntypedef struct {\n  int1792m_T re;\n  int1792m_T im;\n} cint1792m_T;\n\ntypedef struct {\n  uint32_T chunks[56];\n} uint1792m_T;\n\ntypedef struct {\n  uint1792m_T re;\n  uint1792m_T im;\n} cuint1792m_T;\n\ntypedef struct {\n  uint32_T chunks[57];\n} int1824m_T;\n\ntypedef struct {\n  int1824m_T re;\n  int1824m_T im;\n} cint1824m_T;\n\ntypedef struct {\n  uint32_T chunks[57];\n} uint1824m_T;\n\ntypedef struct {\n  uint1824m_T re;\n  uint1824m_T im;\n} cuint1824m_T;\n\ntypedef struct {\n  uint32_T chunks[58];\n} int1856m_T;\n\ntypedef struct {\n  int1856m_T re;\n  int1856m_T im;\n} cint1856m_T;\n\ntypedef struct {\n  uint32_T chunks[58];\n} uint1856m_T;\n\ntypedef struct {\n  uint1856m_T re;\n  uint1856m_T im;\n} cuint1856m_T;\n\ntypedef struct {\n  uint32_T chunks[59];\n} int1888m_T;\n\ntypedef struct {\n  int1888m_T re;\n  int1888m_T im;\n} cint1888m_T;\n\ntypedef struct {\n  uint32_T chunks[59];\n} uint1888m_T;\n\ntypedef struct {\n  uint1888m_T re;\n  uint1888m_T im;\n} cuint1888m_T;\n\ntypedef struct {\n  uint32_T chunks[60];\n} int1920m_T;\n\ntypedef struct {\n  int1920m_T re;\n  int1920m_T im;\n} cint1920m_T;\n\ntypedef struct {\n  uint32_T chunks[60];\n} uint1920m_T;\n\ntypedef struct {\n  uint1920m_T re;\n  uint1920m_T im;\n} cuint1920m_T;\n\ntypedef struct {\n  uint32_T chunks[61];\n} int1952m_T;\n\ntypedef struct {\n  int1952m_T re;\n  int1952m_T im;\n} cint1952m_T;\n\ntypedef struct {\n  uint32_T chunks[61];\n} uint1952m_T;\n\ntypedef struct {\n  uint1952m_T re;\n  uint1952m_T im;\n} cuint1952m_T;\n\ntypedef struct {\n  uint32_T chunks[62];\n} int1984m_T;\n\ntypedef struct {\n  int1984m_T re;\n  int1984m_T im;\n} cint1984m_T;\n\ntypedef struct {\n  uint32_T chunks[62];\n} uint1984m_T;\n\ntypedef struct {\n  uint1984m_T re;\n  uint1984m_T im;\n} cuint1984m_T;\n\ntypedef struct {\n  uint32_T chunks[63];\n} int2016m_T;\n\ntypedef struct {\n  int2016m_T re;\n  int2016m_T im;\n} cint2016m_T;\n\ntypedef struct {\n  uint32_T chunks[63];\n} uint2016m_T;\n\ntypedef struct {\n  uint2016m_T re;\n  uint2016m_T im;\n} cuint2016m_T;\n\ntypedef struct {\n  uint32_T chunks[64];\n} int2048m_T;\n\ntypedef struct {\n  int2048m_T re;\n  int2048m_T im;\n} cint2048m_T;\n\ntypedef struct {\n  uint32_T chunks[64];\n} uint2048m_T;\n\ntypedef struct {\n  uint2048m_T re;\n  uint2048m_T im;\n} cuint2048m_T;\n\n#endif                                 /* MULTIWORD_TYPES_H */\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"/home/lulav/ros2_fprime_bridge/simulink/code_generation/Dynamics/Dynamics_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * rtwtypes.h\n *\n * Code generation for model \"Dynamics\".\n *\n * Model version              : 1.43\n * Simulink Coder version : 9.8 (R2022b) 13-May-2022\n * C++ source code generated on : Mon Nov 28 09:35:05 2022\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTWTYPES_H\n#define RTWTYPES_H\n#include \"tmwtypes.h\"\n#ifndef POINTER_T\n#define POINTER_T\n\ntypedef void * pointer_T;\n\n#endif\n\n/* Logical type definitions */\n#if (!defined(__cplusplus))\n#ifndef false\n#define false                          (0U)\n#endif\n\n#ifndef true\n#define true                           (1U)\n#endif\n#endif\n#endif                                 /* RTWTYPES_H */\n"},{"name":"Dynamics_capi.cpp","type":"source","group":"interface","path":"/home/lulav/ros2_fprime_bridge/simulink/code_generation/Dynamics/Dynamics_grt_rtw","tag":"","groupDisplay":"Interface files","code":"/*\n * Dynamics_capi.cpp\n *\n * Code generation for model \"Dynamics\".\n *\n * Model version              : 1.43\n * Simulink Coder version : 9.8 (R2022b) 13-May-2022\n * C++ source code generated on : Mon Nov 28 09:35:05 2022\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#include \"rtw_capi.h\"\n#ifdef HOST_CAPI_BUILD\n#include \"Dynamics_capi_host.h\"\n#define sizeof(s)                      ((size_t)(0xFFFF))\n#undef rt_offsetof\n#define rt_offsetof(s,el)              ((uint16_T)(0xFFFF))\n#define TARGET_CONST\n#define TARGET_STRING(s)               (s)\n#else                                  /* HOST_CAPI_BUILD */\n#include \"builtin_typeid_types.h\"\n#include \"Dynamics.h\"\n#include \"Dynamics_capi.h\"\n#include \"Dynamics_private.h\"\n#ifdef LIGHT_WEIGHT_CAPI\n#define TARGET_CONST\n#define TARGET_STRING(s)               ((nullptr))\n#else\n#define TARGET_CONST                   const\n#define TARGET_STRING(s)               (s)\n#endif\n#endif                                 /* HOST_CAPI_BUILD */\n\nstatic rtwCAPI_BlockParameters rtBlockParameters[]{\n  /* addrMapIndex, blockPath,\n   * paramName, dataTypeIndex, dimIndex, fixPtIdx\n   */\n  { 0, TARGET_STRING(\"Dynamics/Constant\"),\n    TARGET_STRING(\"Value\"), 0, 0, 0 },\n\n  { 1, TARGET_STRING(\"Dynamics/Constant1\"),\n    TARGET_STRING(\"Value\"), 0, 0, 0 },\n\n  { 2, TARGET_STRING(\"Dynamics/Constant2\"),\n    TARGET_STRING(\"Value\"), 1, 0, 0 },\n\n  { 3, TARGET_STRING(\"Dynamics/Constant3\"),\n    TARGET_STRING(\"Value\"), 0, 0, 0 },\n\n  { 4, TARGET_STRING(\"Dynamics/Constant4\"),\n    TARGET_STRING(\"Value\"), 0, 0, 0 },\n\n  { 5, TARGET_STRING(\"Dynamics/Constant5\"),\n    TARGET_STRING(\"Value\"), 0, 0, 0 },\n\n  {\n    0, (nullptr), (nullptr), 0, 0, 0\n  }\n};\n\n/* Tunable variable parameters */\nstatic rtwCAPI_ModelParameters rtModelParameters[]{\n  /* addrMapIndex, varName, dataTypeIndex, dimIndex, fixPtIndex */\n  { 0, (nullptr), 0, 0, 0 }\n};\n\n#ifndef HOST_CAPI_BUILD\n\n/* Initialize Data Address */\nstatic void Dynamics_InitializeDataAddr(void* dataAddr[], P_Dynamics_T\n  *Dynamics_P)\n{\n  dataAddr[0] = (void*) (&Dynamics_P->Constant_Value);\n  dataAddr[1] = (void*) (&Dynamics_P->Constant1_Value);\n  dataAddr[2] = (void*) (&Dynamics_P->Constant2_Value);\n  dataAddr[3] = (void*) (&Dynamics_P->Constant3_Value);\n  dataAddr[4] = (void*) (&Dynamics_P->Constant4_Value);\n  dataAddr[5] = (void*) (&Dynamics_P->Constant5_Value);\n}\n\n#endif\n\n/* Initialize Data Run-Time Dimension Buffer Address */\n#ifndef HOST_CAPI_BUILD\n\nstatic void Dynamics_InitializeVarDimsAddr(int32_T* vardimsAddr[])\n{\n  vardimsAddr[0] = (nullptr);\n}\n\n#endif\n\n#ifndef HOST_CAPI_BUILD\n\n/* Initialize logging function pointers */\nstatic void Dynamics_InitializeLoggingFunctions(RTWLoggingFcnPtr loggingPtrs[])\n{\n  loggingPtrs[0] = (nullptr);\n  loggingPtrs[1] = (nullptr);\n  loggingPtrs[2] = (nullptr);\n  loggingPtrs[3] = (nullptr);\n  loggingPtrs[4] = (nullptr);\n  loggingPtrs[5] = (nullptr);\n}\n\n#endif\n\n/* Data Type Map - use dataTypeMapIndex to access this structure */\nstatic TARGET_CONST rtwCAPI_DataTypeMap rtDataTypeMap[]{\n  /* cName, mwName, numElements, elemMapIndex, dataSize, slDataId, *\n   * isComplex, isPointer, enumStorageType */\n  { \"double\", \"real_T\", 0, 0, sizeof(real_T), (uint8_T)SS_DOUBLE, 0, 0, 0 },\n\n  { \"struct\", \"B_Dynamics\", 2, 1, sizeof(B_Dynamics), (uint8_T)SS_STRUCT, 0, 0,\n    0 }\n};\n\n#ifdef HOST_CAPI_BUILD\n#undef sizeof\n#endif\n\n/* Structure Element Map - use elemMapIndex to access this structure */\nstatic TARGET_CONST rtwCAPI_ElementMap rtElementMap[]{\n  /* elementName, elementOffset, dataTypeIndex, dimIndex, fxpIndex */\n  { (nullptr), 0, 0, 0, 0 },\n\n  { \"r\", rt_offsetof(B_Dynamics, r), 0, 0, 0 },\n\n  { \"v\", rt_offsetof(B_Dynamics, v), 0, 0, 0 }\n};\n\n/* Dimension Map - use dimensionMapIndex to access elements of ths structure*/\nstatic rtwCAPI_DimensionMap rtDimensionMap[]{\n  /* dataOrientation, dimArrayIndex, numDims, vardimsIndex */\n  { rtwCAPI_SCALAR, 0, 2, 0 }\n};\n\n/* Dimension Array- use dimArrayIndex to access elements of this array */\nstatic uint_T rtDimensionArray[]{\n  1,                                   /* 0 */\n  1                                    /* 1 */\n};\n\n/* Fixed Point Map */\nstatic rtwCAPI_FixPtMap rtFixPtMap[]{\n  /* fracSlopePtr, biasPtr, scaleType, wordLength, exponent, isSigned */\n  { (nullptr), (nullptr), rtwCAPI_FIX_RESERVED, 0, 0, (boolean_T)0 },\n};\n\n/* Sample Time Map - use sTimeIndex to access elements of ths structure */\nstatic rtwCAPI_SampleTimeMap rtSampleTimeMap[]{\n  /* samplePeriodPtr, sampleOffsetPtr, tid, samplingMode */\n  {\n    (nullptr), (nullptr), 0, 0\n  }\n};\n\nstatic rtwCAPI_ModelMappingStaticInfo mmiStatic{\n  /* Signals:{signals, numSignals,\n   *           rootInputs, numRootInputs,\n   *           rootOutputs, numRootOutputs},\n   * Params: {blockParameters, numBlockParameters,\n   *          modelParameters, numModelParameters},\n   * States: {states, numStates},\n   * Maps:   {dataTypeMap, dimensionMap, fixPtMap,\n   *          elementMap, sampleTimeMap, dimensionArray},\n   * TargetType: targetType\n   */\n  { (nullptr), 0,\n    (nullptr), 0,\n    (nullptr), 0 },\n\n  { rtBlockParameters, 6,\n    rtModelParameters, 0 },\n\n  { (nullptr), 0 },\n\n  { rtDataTypeMap, rtDimensionMap, rtFixPtMap,\n    rtElementMap, rtSampleTimeMap, rtDimensionArray },\n  \"float\",\n\n  { 1961753721U,\n    3708629270U,\n    4177789179U,\n    2159740464U },\n  (nullptr), 0,\n  (boolean_T)0\n};\n\n/* Function to get C API Model Mapping Static Info */\nconst rtwCAPI_ModelMappingStaticInfo*\n  Dynamics_GetCAPIStaticMap(void)\n{\n  return &mmiStatic;\n}\n\n/* Cache pointers into DataMapInfo substructure of RTModel */\n#ifndef HOST_CAPI_BUILD\n\nvoid Dynamics_InitializeDataMapInfo(RT_MODEL_Dynamics_T *const Dynamics_M,\n  P_Dynamics_T *Dynamics_P)\n{\n  /* Set C-API version */\n  rtwCAPI_SetVersion(Dynamics_M->DataMapInfo.mmi, 1);\n\n  /* Cache static C-API data into the Real-time Model Data structure */\n  rtwCAPI_SetStaticMap(Dynamics_M->DataMapInfo.mmi, &mmiStatic);\n\n  /* Cache static C-API logging data into the Real-time Model Data structure */\n  rtwCAPI_SetLoggingStaticMap(Dynamics_M->DataMapInfo.mmi, (nullptr));\n\n  /* Cache C-API Data Addresses into the Real-Time Model Data structure */\n  Dynamics_InitializeDataAddr(Dynamics_M->DataMapInfo.dataAddress, Dynamics_P);\n  rtwCAPI_SetDataAddressMap(Dynamics_M->DataMapInfo.mmi,\n    Dynamics_M->DataMapInfo.dataAddress);\n\n  /* Cache C-API Data Run-Time Dimension Buffer Addresses into the Real-Time Model Data structure */\n  Dynamics_InitializeVarDimsAddr(Dynamics_M->DataMapInfo.vardimsAddress);\n  rtwCAPI_SetVarDimsAddressMap(Dynamics_M->DataMapInfo.mmi,\n    Dynamics_M->DataMapInfo.vardimsAddress);\n\n  /* Set Instance specific path */\n  rtwCAPI_SetPath(Dynamics_M->DataMapInfo.mmi, (nullptr));\n  rtwCAPI_SetFullPath(Dynamics_M->DataMapInfo.mmi, (nullptr));\n\n  /* Cache C-API logging function pointers into the Real-Time Model Data structure */\n  Dynamics_InitializeLoggingFunctions(Dynamics_M->DataMapInfo.loggingPtrs);\n  rtwCAPI_SetLoggingPtrs(Dynamics_M->DataMapInfo.mmi,\n    Dynamics_M->DataMapInfo.loggingPtrs);\n\n  /* Cache the instance C-API logging pointer */\n  rtwCAPI_SetInstanceLoggingInfo(Dynamics_M->DataMapInfo.mmi, (nullptr));\n\n  /* Set reference to submodels */\n  rtwCAPI_SetChildMMIArray(Dynamics_M->DataMapInfo.mmi, (nullptr));\n  rtwCAPI_SetChildMMIArrayLen(Dynamics_M->DataMapInfo.mmi, 0);\n}\n\n#else                                  /* HOST_CAPI_BUILD */\n#ifdef __cplusplus\n\nextern \"C\"\n{\n\n#endif\n\n  void Dynamics_host_InitializeDataMapInfo(Dynamics_host_DataMapInfo_T *dataMap,\n    const char *path)\n  {\n    /* Set C-API version */\n    rtwCAPI_SetVersion(dataMap->mmi, 1);\n\n    /* Cache static C-API data into the Real-time Model Data structure */\n    rtwCAPI_SetStaticMap(dataMap->mmi, &mmiStatic);\n\n    /* host data address map is NULL */\n    rtwCAPI_SetDataAddressMap(dataMap->mmi, (nullptr));\n\n    /* host vardims address map is NULL */\n    rtwCAPI_SetVarDimsAddressMap(dataMap->mmi, (nullptr));\n\n    /* Set Instance specific path */\n    rtwCAPI_SetPath(dataMap->mmi, path);\n    rtwCAPI_SetFullPath(dataMap->mmi, (nullptr));\n\n    /* Set reference to submodels */\n    rtwCAPI_SetChildMMIArray(dataMap->mmi, (nullptr));\n    rtwCAPI_SetChildMMIArrayLen(dataMap->mmi, 0);\n  }\n\n#ifdef __cplusplus\n\n}\n\n#endif\n#endif                                 /* HOST_CAPI_BUILD */\n\n/* EOF: Dynamics_capi.cpp */\n"},{"name":"Dynamics_capi.h","type":"header","group":"interface","path":"/home/lulav/ros2_fprime_bridge/simulink/code_generation/Dynamics/Dynamics_grt_rtw","tag":"","groupDisplay":"Interface files","code":"/*\n * Dynamics_capi.h\n *\n * Code generation for model \"Dynamics\".\n *\n * Model version              : 1.43\n * Simulink Coder version : 9.8 (R2022b) 13-May-2022\n * C++ source code generated on : Mon Nov 28 09:35:05 2022\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_Dynamics_capi_h_\n#define RTW_HEADER_Dynamics_capi_h_\n#include \"Dynamics.h\"\n\nextern void Dynamics_InitializeDataMapInfo(RT_MODEL_Dynamics_T *const Dynamics_M,\n  P_Dynamics_T *Dynamics_P);\n\n#endif                                 /* RTW_HEADER_Dynamics_capi_h_ */\n\n/* EOF: Dynamics_capi.h */\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"/home/lulav/ros2_fprime_bridge/simulink/code_generation/Dynamics/Dynamics_grt_rtw","tag":"","groupDisplay":"Interface files","code":"/*\n *  rtmodel.h:\n *\n * Code generation for model \"Dynamics\".\n *\n * Model version              : 1.43\n * Simulink Coder version : 9.8 (R2022b) 13-May-2022\n * C++ source code generated on : Mon Nov 28 09:35:05 2022\n *\n * Target selection: grt.tlc\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\n * Embedded hardware selection: Intel->x86-64 (Windows64)\n * Code generation objectives: Unspecified\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_rtmodel_h_\n#define RTW_HEADER_rtmodel_h_\n#include \"Dynamics.h\"\n#define MODEL_CLASSNAME                Dynamics\n#define MODEL_STEPNAME                 step\n#define GRTINTERFACE                   0\n\n/*\n * ROOT_IO_FORMAT: 0 (Individual arguments)\n * ROOT_IO_FORMAT: 1 (Structure reference)\n * ROOT_IO_FORMAT: 2 (Part of model data structure)\n */\n#define ROOT_IO_FORMAT                 2\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\n"},{"name":"Dynamics_capi_host.h","type":"header","group":"other","path":"/home/lulav/ros2_fprime_bridge/simulink/code_generation/Dynamics/Dynamics_grt_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef RTW_HEADER_Dynamics_cap_host_h__\n#define RTW_HEADER_Dynamics_cap_host_h__\n#ifdef HOST_CAPI_BUILD\n#include \"rtw_capi.h\"\n#include \"rtw_modelmap.h\"\n\nstruct Dynamics_host_DataMapInfo_T {\n  rtwCAPI_ModelMappingInfo mmi;\n};\n\n#ifdef __cplusplus\n\nextern \"C\"\n{\n\n#endif\n\n  void Dynamics_host_InitializeDataMapInfo(Dynamics_host_DataMapInfo_T *dataMap,\n    const char *path);\n\n#ifdef __cplusplus\n\n}\n\n#endif\n#endif                                 /* HOST_CAPI_BUILD */\n#endif                                 /* RTW_HEADER_Dynamics_cap_host_h__ */\n\n/* EOF: Dynamics_capi_host.h */\n"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":false,"showJustificationLinks":false,"showProfilingInfo":false,"showTaskSummary":false}};